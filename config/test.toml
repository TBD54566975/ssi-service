title = "SSI Service Config"

svn = "0.0.1"
desc = "Configuration to be used while running the service for testing with docker compose."

# http service configuration
[server]
env = "test" # either 'dev', 'test' or 'prod'
api_host = "0.0.0.0:3000"

# jager config
jager_host = "http://jaeger:14268/api/traces"
jager_enabled = true

# 5 seconds, time is in nanoseconds
read_timeout = 5000000000
write_timeout = 5000000000
shutdown_timeout = 5000000000

log_location = "log"
# options: trace, debug, info, warn, error, fatal, panic
log_level = "debug"

enable_schema_caching = true
enable_allow_all_cors = true

# Storage Configuration
[services]
service_endpoint = "http://localhost:8080"
storage = "redis"

[[services.storage_option]]
id = "redis-address-option"
option = "redis:6379"

[[services.storage_option]]
id = "storage-password-option"
option = "password"

# per-service configuration
[services.keystore]
name = "keystore"
password = "default-password"
# master_key_uri = "gcp-kms://projects/*/locations/*/keyRings/*/cryptoKeys/*"
# kms_credentials_path = "credentials.json"

[services.did]
name = "did"
methods = ["key", "web", "ion"]
local_resolution_methods = ["key", "web", "pkh", "peer"]
universal_resolver_url = "http://uni-resolver-web:8080"
universal_resolver_methods = ["ion"]
ion_resolver_url = "https://ion.tbddev.org"

[services.schema]
name = "schema"

[services.issuance]
name = "issuance"

[services.credential]
name = "credential"

[services.issuance]
name = "issuance"

[services.manifest]
name = "manifest"

[services.presentation]
name = "presentation"

[services.webhook]
name = "webhook"
webhook_timeout = "10s"
