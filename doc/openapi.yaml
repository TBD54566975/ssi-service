swagger: '2.0'
info:
  title: ssi-service
  version: '1.0'
  description: ''
host: 'localhost:3000'
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
paths:
  /v1/dids:
    parameters: []
    get:
      summary: ''
      tags:
        - DecentralizedIdentityAPI
      responses:
        '200':
          $ref: '#/responses/GetDIDMethodsResponse'
      operationId: get-v1-dids
      description: Retrieve the DID methods.
      parameters: []
  '/v1/dids/{method}':
    parameters:
      - type: string
        name: method
        in: path
        required: true
    put:
      summary: ''
      operationId: put-v1-dids-method
      responses:
        '201':
          $ref: '#/responses/CreateDIDByMethodResponse'
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              did:
                type: string
          examples:
            example-1: {}
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties: {}
      description: create DID by method
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              keyType:
                type: string
          description: ''
      tags:
        - DecentralizedIdentityAPI
  '/v1/dids/{method}/{id}':
    parameters:
      - type: string
        name: method
        in: path
        required: true
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: ''
      tags:
        - DecentralizedIdentityAPI
      responses:
        '200':
          $ref: '#/responses/GetDIDByMethodResponse'
        '400':
          description: Bad Request
          schema:
            type: object
            properties: {}
      operationId: get-v1-dids-method-id
      description: Get DID by method.
  '/v1/schemas/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: ''
      tags:
        - SchemaAPI
      responses:
        '200':
          $ref: '#/responses/GetSchemaResponse'
        '400':
          description: Bad Request
          schema:
            type: object
            properties: {}
      operationId: get-v1-schemas-id
      description: Get schema by ID.
  /v1/schemas:
    put:
      summary: ''
      operationId: put-v1-schemas
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              author:
                type: string
              name:
                type: string
              schema:
                $ref: '#/definitions/VCJSONSchema'
            required:
              - author
              - name
          description: ''
      responses:
        '201':
          $ref: '#/responses/CreateSchemaResponse'
        '400':
          description: Bad Request
          schema:
            type: object
            properties: {}
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties: {}
      description: Create schema.
      tags:
        - SchemaAPI
    parameters: []
    get:
      summary: ''
      operationId: get-schemas
      responses:
        '200':
          $ref: '#/responses/GetSchemasResponse'
        '400':
          description: Bad Request
          schema:
            type: object
            properties: {}
      description: Get schemas.
      tags:
        - SchemaAPI
  /v1/credentials:
    get:
      summary: ''
      tags:
        - CredentialAPI
      responses:
        '201':
          $ref: '#/responses/GetCredentialsResponse'
        '400':
          description: Bad Request
          schema:
            type: object
            properties: {}
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties: {}
      operationId: get-v1-credentials
      description: GetCredentials checks for the presence of a query parameter and calls the associated filtered get method.
      parameters:
        - type: string
          in: query
          name: issuer
        - type: string
          in: query
          name: schema
        - type: string
          in: query
          name: subject
    parameters: []
    put:
      summary: ''
      tags:
        - CredentialAPI
      operationId: put-v1-credentials
      responses:
        '200':
          $ref: '#/responses/CreateCredentialResponse'
      description: Create a credential.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              issuer:
                type: string
              subject:
                type: string
              "@context":
                type: string
                description: 'A context is optional. If not present, we''ll apply default, required context values.'
                allowReserved: true
              schema:
                type: string
                description: 'A schema is optional. If present, we''ll attempt to look it up and validate the data against it.'
              data:
                type: object
              expiry:
                type: string
            required:
              - issuer
              - subject
              - data
  '/v1/credentials/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: ''
      operationId: get-v1-credentials-id
      tags:
        - CredentialAPI
      responses:
        '200':
          $ref: '#/responses/GetCredentialResponse'
        '400':
          description: Bad Request
          schema:
            type: object
            properties: {}
      description: get credentials by ID.
    delete:
      summary: ''
      tags:
        - CredentialAPI
      operationId: delete-v1-credentials-id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          schema:
            type: object
            properties: {}
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties: {}
      description: delete the credential by ID.
  /health:
    get:
      summary: ''
      tags:
        - NewSSIServer
      responses:
        '200':
          $ref: '#/responses/GetHealthCheckResponse'
      operationId: get-health
      description: Health is a simple handler that always responds with a 200 OK
definitions:
  DIDDocument:
    title: DIDDocument
    type: object
    description: |
      DIDDocument is a representation of the did core specification https://www.w3.org/TR/did-core
    properties:
      "@context":
        type: object
        allowReserved: true
      id:
        type: string
      controller:
        type: string
      alsoKnownAs:
        type: string
      verificationMethod:
        $ref: '#/definitions/VerificationMethodSet'
      authentication:
        $ref: '#/definitions/VerificationMethodSet'
      assertionMethod:
        $ref: '#/definitions/VerificationMethodSet'
      keyAgreement:
        $ref: '#/definitions/VerificationMethodSet'
      capabilityInvocation:
        $ref: '#/definitions/VerificationMethodSet'
      capabilityDelegation:
        $ref: '#/definitions/VerificationMethodSet'
      service:
        $ref: '#/definitions/Service'
  VerificationMethod:
    title: VerificationMethod
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      controller:
        type: string
      publicKeyBase58:
        type: string
      publicKeyJwk:
        type: string
      publicKeyMultibase:
        type: string
    required:
      - id
      - type
      - controller
  VerificationMethodSet:
    title: VerificationMethodSet
    type: object
    description: |
      VerificationMethodSet is a union type supporting the `authentication`, `assertionMethod`, `keyAgreement`,
      `capabilityInvocation`, and `capabilityDelegation` types.
      A set of one or more verification methods. Each verification method MAY be embedded or referenced.
  Service:
    title: Service
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      serviceEndpoint:
        type:
          - object
          - string
    required:
      - id
      - type
      - serviceEndpoint
    description: 'Service is a property compliant with the did-core spec https://www.w3.org/TR/did-core/#services'
  VCJSONSchema:
    title: VCJSONSchema
    type: object
    description: |
      VCJSONSchema is the model representing the
      credential json schema specification https://w3c-ccg.github.io/vc-json-schemas/v2/index.html#credential_schema_definition
    properties:
      type:
        type: string
      version:
        type: string
      id:
        type: string
      name:
        type: string
      author:
        type: string
      authored:
        type: string
      schema:
        $ref: '#/definitions/JSONSchema'
  JSONSchema:
    title: JSONSchema
    type: object
  VerifiableCredential:
    title: VerifiableCredential
    type: object
    properties:
      "@context":
        type:
          - string
          - array
        description: |
          Either a string or set of strings
        items:
          type: string
        allowReserved: true
      id:
        type: string
      type:
        type:
          - string
          - array
        description: |
          Either a string or a set of strings https://www.w3.org/TR/2021/REC-vc-data-model-20211109/#types
        items:
          type: string
      issuer:
        type:
          - string
          - object
        description: |
          either a URI or an object containing an `id` property.
      issuanceDate:
        type: string
      expirationDate:
        type: string
      credentialStatus:
        $ref: '#/definitions/CredentialStatus'
      credentialSubject:
        $ref: '#/definitions/CredentialSubject'
      credentialSchema:
        $ref: '#/definitions/CredentialSchema'
      refreshService:
        $ref: '#/definitions/RefreshService'
      termsOfUse:
        type: array
        items:
          $ref: '#/definitions/TermsOfUse'
      evidence:
        type: array
        items:
          type: object
      proof:
        $ref: '#/definitions/Proof'
    required:
      - type
      - issuer
      - issuanceDate
      - credentialSubject
  CredentialStatus:
    title: CredentialStatus
    type: object
    description: |
      CredentialStatus https://www.w3.org/TR/2021/REC-vc-data-model-20211109/#status
    properties:
      id:
        type: string
      type:
        type: string
    required:
      - id
      - type
  CredentialSubject:
    title: CredentialSubject
    type: object
  CredentialSchema:
    title: CredentialSchema
    type: object
    properties:
      id:
        type: string
      type:
        type: string
    required:
      - id
      - type
  RefreshService:
    title: RefreshService
    type: object
    properties:
      id:
        type: string
      type:
        type: string
    required:
      - id
      - type
  TermsOfUse:
    title: TermsOfUse
    type: object
    properties:
      type:
        type: string
      id:
        type: string
      profile:
        type: string
      prohibition:
        type: array
        items:
          $ref: '#/definitions/Prohibition'
    description: |
      TermsOfUse In the current version of the specification TOU isn't well-defined; these fields are subject to change
      https://www.w3.org/TR/2021/REC-vc-data-model-20211109/#terms-of-use
  Prohibition:
    title: Prohibition
    type: object
    properties:
      assigner:
        type: string
      assignee:
        type: string
      target:
        type: string
      action:
        type: array
        items:
          type: string
  Proof:
    title: Proof
    type: object
    description: |
      For embedded proof support
      Proof is a digital signature over a credential https://www.w3.org/TR/2021/REC-vc-data-model-20211109/#proofs-signatures
responses:
  GetDIDMethodsResponse:
    description: GetDIDMethods
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    examples: {}
    schema:
      type: object
      properties:
        didMethods:
          type: array
          items:
            type: string
  CreateDIDByMethodResponse:
    description: CreateDIDByMethod
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    examples:
      example-1: {}
    schema:
      type: object
      properties:
        did:
          $ref: '#/definitions/DIDDocument'
          allowReserved: true
        privateKeyBase58:
          type: string
  GetDIDByMethodResponse:
    description: GetDIDByMethod
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      type: object
      properties:
        did:
          $ref: '#/definitions/DIDDocument'
  GetSchemasResponse:
    description: GetSchemas
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      type: object
      properties:
        schemas:
          type: array
          items:
            $ref: '#/definitions/VCJSONSchema'
  GetSchemaResponse:
    description: GetSchemaByID
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      type: object
      properties:
        schema:
          $ref: '#/definitions/VCJSONSchema'
  CreateSchemaResponse:
    description: CreateSchema
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      type: object
      properties:
        id:
          type: string
        schema:
          $ref: '#/definitions/VCJSONSchema'
  GetCredentialsResponse:
    description: GetCredentials
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: '#/definitions/VerifiableCredential'
  GetCredentialResponse:
    description: GetCredential
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      type: object
      properties:
        id:
          type: string
        credential:
          $ref: '#/definitions/VerifiableCredential'
  CreateCredentialResponse:
    description: CreateCredential
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      type: object
      properties:
        credential:
          $ref: '#/definitions/VerifiableCredential'
  GetHealthCheckResponse:
    description: Health
    content:
      application/json:
        schema:
          properties:
            id:
              type: string
    schema:
      type: object
      properties:
        status:
          type: string
