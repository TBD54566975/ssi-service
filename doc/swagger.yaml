definitions:
  credential.Container:
    properties:
      credential:
        $ref: '#/definitions/credential.VerifiableCredential'
      credentialJWT:
        type: string
      id:
        description: Credential ID
        type: string
      revoked:
        type: boolean
    type: object
  credential.CredentialSchema:
    properties:
      id:
        type: string
      type:
        type: string
    required:
    - id
    - type
    type: object
  credential.CredentialSubject:
    additionalProperties: true
    type: object
  credential.Prohibition:
    properties:
      action:
        items:
          type: string
        type: array
      assignee:
        type: string
      assigner:
        type: string
      target:
        type: string
    type: object
  credential.RefreshService:
    properties:
      id:
        type: string
      type:
        type: string
    required:
    - id
    - type
    type: object
  credential.TermsOfUse:
    properties:
      id:
        type: string
      profile:
        type: string
      prohibition:
        items:
          $ref: '#/definitions/credential.Prohibition'
        type: array
      type:
        type: string
    type: object
  credential.VerifiableCredential:
    properties:
      '@context':
        description: Either a string or set of strings
      credentialSchema:
        $ref: '#/definitions/credential.CredentialSchema'
      credentialStatus: {}
      credentialSubject:
        $ref: '#/definitions/credential.CredentialSubject'
        description: This is where the subject's ID *may* be present
      evidence:
        items: {}
        type: array
      expirationDate:
        type: string
      id:
        type: string
      issuanceDate:
        description: https://www.w3.org/TR/xmlschema11-2/#dateTimes
        type: string
      issuer:
        description: either a URI or an object containing an `id` property.
      proof:
        description: |-
          For embedded proof support
          Proof is a digital signature over a credential https://www.w3.org/TR/2021/REC-vc-data-model-20211109/#proofs-signatures
      refreshService:
        $ref: '#/definitions/credential.RefreshService'
      termsOfUse:
        items:
          $ref: '#/definitions/credential.TermsOfUse'
        type: array
      type:
        description: Either a string or a set of strings https://www.w3.org/TR/2021/REC-vc-data-model-20211109/#types
    required:
    - '@context'
    - credentialSubject
    - issuanceDate
    - issuer
    - type
    type: object
  crypto.PublicKeyJWK:
    properties:
      alg:
        type: string
      crv:
        type: string
      e:
        type: string
      key_ops:
        type: string
      kid:
        type: string
      kty:
        type: string
      "n":
        type: string
      use:
        type: string
      x:
        type: string
      "y":
        type: string
    required:
    - kty
    type: object
  did.DIDDocument:
    properties:
      '@context': {}
      alsoKnownAs:
        type: string
      assertionMethod:
        items: {}
        type: array
      authentication:
        items: {}
        type: array
      capabilityDelegation:
        items: {}
        type: array
      capabilityInvocation:
        items: {}
        type: array
      controller:
        type: string
      id:
        description: |-
          As per https://www.w3.org/TR/did-core/#did-subject intermediate representations of DID Documents do not
          require an ID property. The provided test vectors demonstrate IRs. As such, the property is optional.
        type: string
      keyAgreement:
        items: {}
        type: array
      service:
        items:
          $ref: '#/definitions/did.Service'
        type: array
      verificationMethod:
        items:
          $ref: '#/definitions/did.VerificationMethod'
        type: array
    type: object
  did.DIDDocumentMetadata:
    properties:
      canonicalId:
        type: string
      created:
        type: string
      deactivated:
        type: boolean
      equivalentId:
        type: string
      nextUpdate:
        type: string
      nextVersionId:
        type: string
      updated:
        type: string
      versionId:
        type: string
    type: object
  did.DIDResolutionMetadata:
    properties:
      contentType:
        type: string
      error:
        $ref: '#/definitions/did.ResolutionError'
    type: object
  did.ResolutionError:
    properties:
      code:
        type: string
      invalidDid:
        type: boolean
      notFound:
        type: boolean
      representationNotSupported:
        type: boolean
    type: object
  did.Service:
    type: object
  did.VerificationMethod:
    properties:
      blockchainAccountId:
        description: for PKH DIDs - https://github.com/w3c-ccg/did-pkh/blob/90b28ad3c18d63822a8aab3c752302aa64fc9382/did-pkh-method-draft.md
        type: string
      controller:
        type: string
      id:
        type: string
      publicKeyBase58:
        type: string
      publicKeyJwk:
        $ref: '#/definitions/crypto.PublicKeyJWK'
        description: must conform to https://datatracker.ietf.org/doc/html/rfc7517
      publicKeyMultibase:
        description: https://datatracker.ietf.org/doc/html/draft-multiformats-multibase-03
        type: string
      type:
        type: string
    required:
    - controller
    - id
    - type
    type: object
  exchange.ClaimFormat:
    properties:
      jwt:
        $ref: '#/definitions/exchange.JWTType'
      jwt_vc:
        $ref: '#/definitions/exchange.JWTType'
      jwt_vp:
        $ref: '#/definitions/exchange.JWTType'
      ldp:
        $ref: '#/definitions/exchange.LDPType'
      ldp_vc:
        $ref: '#/definitions/exchange.LDPType'
      ldp_vp:
        $ref: '#/definitions/exchange.LDPType'
    type: object
  exchange.Constraints:
    properties:
      fields:
        items:
          $ref: '#/definitions/exchange.Field'
        type: array
      is_holder:
        $ref: '#/definitions/exchange.RelationalConstraint'
      limit_disclosure:
        description: |-
          If a predicate property is present, filter must be too
          https://identity.foundation/presentation-exchange/#predicate-feature
        type: string
      same_subject:
        $ref: '#/definitions/exchange.RelationalConstraint'
      statuses:
        $ref: '#/definitions/exchange.CredentialStatus'
        description: https://identity.foundation/presentation-exchange/#credential-status-constraint-feature
      subject_is_issuer:
        description: https://identity.foundation/presentation-exchange/#relational-constraint-feature
        type: string
    type: object
  exchange.CredentialStatus:
    properties:
      active:
        properties:
          directive:
            description: https://identity.foundation/presentation-exchange/#relational-constraint-feature
            type: string
        type: object
      revoked:
        properties:
          directive:
            description: https://identity.foundation/presentation-exchange/#relational-constraint-feature
            type: string
        type: object
      suspended:
        properties:
          directive:
            description: https://identity.foundation/presentation-exchange/#relational-constraint-feature
            type: string
        type: object
    type: object
  exchange.Field:
    properties:
      filter:
        $ref: '#/definitions/exchange.Filter'
      id:
        type: string
      intent_to_retain:
        type: boolean
      name:
        type: string
      optional:
        type: boolean
      path:
        items:
          type: string
        type: array
      predicate:
        description: |-
          If a predicate property is present, filter must be too
          https://identity.foundation/presentation-exchange/#predicate-feature
        type: string
      purpose:
        type: string
    required:
    - path
    type: object
  exchange.Filter:
    properties:
      additionalProperties:
        type: boolean
      allOf: {}
      const: {}
      enum:
        items: {}
        type: array
      exclusiveMaximum: {}
      exclusiveMinimum: {}
      format:
        type: string
      maxLength:
        type: integer
      maximum: {}
      minLength:
        type: integer
      minimum: {}
      not: {}
      oneOf: {}
      pattern:
        type: string
      properties: {}
      required:
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  exchange.InputDescriptor:
    properties:
      constraints:
        $ref: '#/definitions/exchange.Constraints'
      format:
        $ref: '#/definitions/exchange.ClaimFormat'
      group:
        description: Must match a grouping strings listed in the `from` values of
          a submission requirement rule
        items:
          type: string
        type: array
      id:
        description: Must be unique within the Presentation Definition
        type: string
      name:
        type: string
      purpose:
        description: Purpose for which claim's data is being requested
        type: string
    required:
    - constraints
    - id
    type: object
  exchange.JWTType:
    properties:
      alg:
        items:
          type: string
        type: array
    required:
    - alg
    type: object
  exchange.LDPType:
    properties:
      proof_type:
        items:
          type: string
        type: array
    required:
    - proof_type
    type: object
  exchange.PresentationDefinition:
    properties:
      format:
        $ref: '#/definitions/exchange.ClaimFormat'
      frame:
        description: https://identity.foundation/presentation-exchange/#json-ld-framing-feature
      id:
        type: string
      input_descriptors:
        items:
          $ref: '#/definitions/exchange.InputDescriptor'
        type: array
      name:
        type: string
      purpose:
        type: string
      submission_requirements:
        items:
          $ref: '#/definitions/exchange.SubmissionRequirement'
        type: array
    required:
    - id
    - input_descriptors
    type: object
  exchange.PresentationSubmission:
    properties:
      definition_id:
        type: string
      descriptor_map:
        items:
          $ref: '#/definitions/exchange.SubmissionDescriptor'
        type: array
      id:
        type: string
    required:
    - definition_id
    - descriptor_map
    - id
    type: object
  exchange.RelationalConstraint:
    properties:
      directive:
        description: https://identity.foundation/presentation-exchange/#relational-constraint-feature
        type: string
      field_id:
        type: string
    required:
    - directive
    - field_id
    type: object
  exchange.SubmissionDescriptor:
    properties:
      format:
        type: string
      id:
        description: Must match the `id` property of the corresponding input descriptor
        type: string
      path:
        type: string
      path_nested:
        $ref: '#/definitions/exchange.SubmissionDescriptor'
    required:
    - format
    - id
    - path
    type: object
  exchange.SubmissionRequirement:
    properties:
      count:
        minimum: 1
        type: integer
      from:
        type: string
      from_nested:
        items:
          $ref: '#/definitions/exchange.SubmissionRequirement'
        type: array
      max:
        type: integer
      min:
        type: integer
      name:
        type: string
      purpose:
        type: string
      rule:
        type: string
    required:
    - rule
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreateCredentialRequest:
    properties:
      '@context':
        description: A context is optional. If not present, we'll apply default, required
          context values.
        type: string
      data:
        additionalProperties: true
        type: object
      expiry:
        type: string
      issuer:
        type: string
      revocable:
        type: boolean
      schema:
        description: A schema is optional. If present, we'll attempt to look it up
          and validate the data against it.
        type: string
      subject:
        type: string
    required:
    - data
    - issuer
    - subject
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreateCredentialResponse:
    properties:
      credential:
        $ref: '#/definitions/credential.VerifiableCredential'
      credentialJwt:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreateDIDByMethodRequest:
    properties:
      didWebId:
        type: string
      keyType:
        type: string
    required:
    - keyType
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreateDIDByMethodResponse:
    properties:
      did:
        $ref: '#/definitions/did.DIDDocument'
      keyType:
        type: string
      privateKeyBase58:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreateManifestRequest:
    properties:
      description:
        type: string
      format:
        $ref: '#/definitions/exchange.ClaimFormat'
      issuerDid:
        type: string
      issuerName:
        type: string
      name:
        type: string
      outputDescriptors:
        items:
          $ref: '#/definitions/manifest.OutputDescriptor'
        type: array
      presentationDefinition:
        $ref: '#/definitions/exchange.PresentationDefinition'
    required:
    - format
    - issuerDid
    - outputDescriptors
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreateManifestResponse:
    properties:
      credential_manifest:
        $ref: '#/definitions/manifest.CredentialManifest'
      manifestJwt:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreatePresentationDefinitionRequest:
    properties:
      format:
        $ref: '#/definitions/exchange.ClaimFormat'
      inputDescriptors:
        items:
          $ref: '#/definitions/exchange.InputDescriptor'
        type: array
      name:
        type: string
      purpose:
        type: string
      submissionRequirements:
        items:
          $ref: '#/definitions/exchange.SubmissionRequirement'
        type: array
    required:
    - inputDescriptors
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreatePresentationDefinitionResponse:
    properties:
      presentation_definition:
        $ref: '#/definitions/exchange.PresentationDefinition'
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreateSchemaRequest:
    properties:
      author:
        type: string
      name:
        type: string
      schema:
        $ref: '#/definitions/schema.JSONSchema'
      sign:
        description: Sign represents whether the schema should be signed by the author.
          Default is false.
        type: boolean
    required:
    - author
    - name
    - schema
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreateSchemaResponse:
    properties:
      id:
        type: string
      schema:
        $ref: '#/definitions/schema.VCJSONSchema'
      schemaJwt:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.CreateSubmissionRequest:
    properties:
      submissionJwt:
        type: string
    required:
    - submissionJwt
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetApplicationResponse:
    properties:
      application:
        $ref: '#/definitions/manifest.CredentialApplication'
      id:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetApplicationsResponse:
    properties:
      applications:
        items:
          $ref: '#/definitions/manifest.CredentialApplication'
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetCredentialResponse:
    properties:
      credential:
        $ref: '#/definitions/credential.VerifiableCredential'
      credentialJwt:
        type: string
      id:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetCredentialStatusListResponse:
    properties:
      credential:
        $ref: '#/definitions/credential.VerifiableCredential'
      credentialJwt:
        type: string
      id:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetCredentialStatusResponse:
    properties:
      revoked:
        type: boolean
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetCredentialsResponse:
    properties:
      credentials:
        items:
          $ref: '#/definitions/credential.Container'
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetDIDByMethodResponse:
    properties:
      did:
        $ref: '#/definitions/did.DIDDocument'
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetDIDMethodsResponse:
    properties:
      methods:
        items:
          type: string
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetDIDsByMethodResponse:
    properties:
      dids:
        items:
          $ref: '#/definitions/did.DIDDocument'
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetHealthCheckResponse:
    properties:
      status:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetKeyDetailsResponse:
    properties:
      controller:
        type: string
      createdAt:
        type: string
      id:
        type: string
      type:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetManifestResponse:
    properties:
      credential_manifest:
        $ref: '#/definitions/manifest.CredentialManifest'
      id:
        type: string
      manifestJwt:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetManifestsResponse:
    properties:
      manifests:
        items:
          $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.GetManifestResponse'
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetOperationsRequest:
    properties:
      filter:
        description: |-
          A standard filter expression conforming to https://google.aip.dev/160.
          For example: `done = true`.
        type: string
      parent:
        description: 'The name of the parent''s resource. For example: "/presentation/submissions".'
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetOperationsResponse:
    properties:
      operations:
        items:
          $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.Operation'
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetPresentationDefinitionResponse:
    properties:
      presentation_definition:
        $ref: '#/definitions/exchange.PresentationDefinition'
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetResponseResponse:
    properties:
      id:
        type: string
      response:
        $ref: '#/definitions/manifest.CredentialResponse'
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetResponsesResponse:
    properties:
      responses:
        items:
          $ref: '#/definitions/manifest.CredentialResponse'
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetSchemaResponse:
    properties:
      schema:
        $ref: '#/definitions/schema.VCJSONSchema'
      schemaJwt:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetSchemasResponse:
    properties:
      schemas:
        items:
          $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.GetSchemaResponse'
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.GetSubmissionResponse:
    properties:
      definition_id:
        type: string
      descriptor_map:
        items:
          $ref: '#/definitions/exchange.SubmissionDescriptor'
        type: array
      id:
        type: string
      reason:
        description: The reason why the submission was approved or denied.
        type: string
      status:
        description: One of {`pending`, `approved`, `denied`}.
        type: string
    required:
    - definition_id
    - descriptor_map
    - id
    - status
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.ListSubmissionRequest:
    properties:
      filter:
        description: |-
          A standard filter expression conforming to https://google.aip.dev/160.
          For example: `status = "done"`.
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.ListSubmissionResponse:
    properties:
      submissions:
        items:
          $ref: '#/definitions/presentation.Submission'
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.Operation:
    properties:
      done:
        description: Whether this operation has finished.
        type: boolean
      id:
        description: The name of the resource related to this operation. E.g. "/presentations/submissions/<uuid>"
        type: string
      result:
        $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.OperationResult'
        description: Populated Done == true.
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.OperationResult:
    properties:
      error:
        description: Populated when there was an error with the operation.
        type: string
      response:
        description: Populated iff Error == "". The type should be specified in the
          calling APIs documentation.
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.ResolveDIDResponse:
    properties:
      didDocument:
        $ref: '#/definitions/did.DIDDocument'
      didDocumentMetadata:
        $ref: '#/definitions/did.DIDDocumentMetadata'
      didResolutionMetadata:
        $ref: '#/definitions/did.DIDResolutionMetadata'
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.ReviewSubmissionRequest:
    properties:
      approved:
        type: boolean
      reason:
        type: string
    required:
    - approved
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.ReviewSubmissionResponse:
    properties:
      definition_id:
        type: string
      descriptor_map:
        items:
          $ref: '#/definitions/exchange.SubmissionDescriptor'
        type: array
      id:
        type: string
      reason:
        description: The reason why the submission was approved or denied.
        type: string
      status:
        description: One of {`pending`, `approved`, `denied`}.
        type: string
    required:
    - definition_id
    - descriptor_map
    - id
    - status
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.StoreKeyRequest:
    properties:
      base58PrivateKey:
        type: string
      controller:
        type: string
      id:
        type: string
      type:
        type: string
    required:
    - base58PrivateKey
    - controller
    - id
    - type
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.SubmitApplicationRequest:
    properties:
      applicationJwt:
        type: string
    required:
    - applicationJwt
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.SubmitApplicationResponse:
    properties:
      credential_response:
        $ref: '#/definitions/manifest.CredentialResponse'
      responseJwt:
        type: string
      verifiableCredentials:
        description: this is an interface type to union Data Integrity and JWT style
          VCs
        items: {}
        type: array
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.UpdateCredentialStatusRequest:
    properties:
      revoked:
        type: boolean
    required:
    - revoked
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.UpdateCredentialStatusResponse:
    properties:
      revoked:
        type: boolean
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.VerifyCredentialRequest:
    properties:
      credential:
        $ref: '#/definitions/credential.VerifiableCredential'
      credentialJwt:
        type: string
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.VerifyCredentialResponse:
    properties:
      reason:
        type: string
      verified:
        type: boolean
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.VerifySchemaRequest:
    properties:
      schemaJwt:
        type: string
    required:
    - schemaJwt
    type: object
  github.com_tbd54566975_ssi-service_pkg_server_router.VerifySchemaResponse:
    properties:
      reason:
        type: string
      verified:
        type: boolean
    type: object
  manifest.CredentialApplication:
    properties:
      format:
        $ref: '#/definitions/exchange.ClaimFormat'
      id:
        type: string
      manifest_id:
        type: string
      presentation_submission:
        $ref: '#/definitions/exchange.PresentationSubmission'
        description: Must be present if the corresponding manifest contains a presentation_definition
      spec_version:
        type: string
    required:
    - format
    - id
    - manifest_id
    - spec_version
    type: object
  manifest.CredentialManifest:
    properties:
      description:
        type: string
      format:
        $ref: '#/definitions/exchange.ClaimFormat'
      id:
        type: string
      issuer:
        $ref: '#/definitions/manifest.Issuer'
      name:
        type: string
      output_descriptors:
        items:
          $ref: '#/definitions/manifest.OutputDescriptor'
        type: array
      presentation_definition:
        $ref: '#/definitions/exchange.PresentationDefinition'
      spec_version:
        type: string
    required:
    - id
    - issuer
    - output_descriptors
    - spec_version
    type: object
  manifest.CredentialResponse:
    properties:
      application_id:
        type: string
      denial:
        properties:
          input_descriptors:
            items:
              type: string
            type: array
          reason:
            type: string
        required:
        - reason
        type: object
      fulfillment:
        properties:
          descriptor_map:
            items:
              $ref: '#/definitions/exchange.SubmissionDescriptor'
            type: array
        required:
        - descriptor_map
        type: object
      id:
        type: string
      manifest_id:
        type: string
      spec_version:
        type: string
    required:
    - id
    - manifest_id
    - spec_version
    type: object
  manifest.Issuer:
    properties:
      id:
        type: string
      name:
        type: string
      styles:
        $ref: '#/definitions/rendering.EntityStyleDescriptor'
        description: |-
          an object or URI as defined by the DIF Entity Styles specification
          https://identity.foundation/wallet-rendering/#entity-styles
    required:
    - id
    type: object
  manifest.OutputDescriptor:
    properties:
      description:
        type: string
      display:
        $ref: '#/definitions/rendering.DataDisplay'
        description: 'both below: an object or URI as defined by the DIF Entity Styles
          specification'
      id:
        description: Must be unique within a manifest
        type: string
      name:
        type: string
      schema:
        type: string
      styles:
        $ref: '#/definitions/rendering.EntityStyleDescriptor'
    required:
    - id
    - schema
    type: object
  pkg_server_router.CreateCredentialRequest:
    properties:
      '@context':
        description: A context is optional. If not present, we'll apply default, required
          context values.
        type: string
      data:
        additionalProperties: true
        type: object
      expiry:
        type: string
      issuer:
        type: string
      revocable:
        type: boolean
      schema:
        description: A schema is optional. If present, we'll attempt to look it up
          and validate the data against it.
        type: string
      subject:
        type: string
    required:
    - data
    - issuer
    - subject
    type: object
  pkg_server_router.CreateCredentialResponse:
    properties:
      credential:
        $ref: '#/definitions/credential.VerifiableCredential'
      credentialJwt:
        type: string
    type: object
  pkg_server_router.CreateDIDByMethodRequest:
    properties:
      didWebId:
        type: string
      keyType:
        type: string
    required:
    - keyType
    type: object
  pkg_server_router.CreateDIDByMethodResponse:
    properties:
      did:
        $ref: '#/definitions/did.DIDDocument'
      keyType:
        type: string
      privateKeyBase58:
        type: string
    type: object
  pkg_server_router.CreateManifestRequest:
    properties:
      description:
        type: string
      format:
        $ref: '#/definitions/exchange.ClaimFormat'
      issuerDid:
        type: string
      issuerName:
        type: string
      name:
        type: string
      outputDescriptors:
        items:
          $ref: '#/definitions/manifest.OutputDescriptor'
        type: array
      presentationDefinition:
        $ref: '#/definitions/exchange.PresentationDefinition'
    required:
    - format
    - issuerDid
    - outputDescriptors
    type: object
  pkg_server_router.CreateManifestResponse:
    properties:
      credential_manifest:
        $ref: '#/definitions/manifest.CredentialManifest'
      manifestJwt:
        type: string
    type: object
  pkg_server_router.CreatePresentationDefinitionRequest:
    properties:
      format:
        $ref: '#/definitions/exchange.ClaimFormat'
      inputDescriptors:
        items:
          $ref: '#/definitions/exchange.InputDescriptor'
        type: array
      name:
        type: string
      purpose:
        type: string
      submissionRequirements:
        items:
          $ref: '#/definitions/exchange.SubmissionRequirement'
        type: array
    required:
    - inputDescriptors
    type: object
  pkg_server_router.CreatePresentationDefinitionResponse:
    properties:
      presentation_definition:
        $ref: '#/definitions/exchange.PresentationDefinition'
    type: object
  pkg_server_router.CreateSchemaRequest:
    properties:
      author:
        type: string
      name:
        type: string
      schema:
        $ref: '#/definitions/schema.JSONSchema'
      sign:
        description: Sign represents whether the schema should be signed by the author.
          Default is false.
        type: boolean
    required:
    - author
    - name
    - schema
    type: object
  pkg_server_router.CreateSchemaResponse:
    properties:
      id:
        type: string
      schema:
        $ref: '#/definitions/schema.VCJSONSchema'
      schemaJwt:
        type: string
    type: object
  pkg_server_router.CreateSubmissionRequest:
    properties:
      submissionJwt:
        type: string
    required:
    - submissionJwt
    type: object
  pkg_server_router.GetApplicationResponse:
    properties:
      application:
        $ref: '#/definitions/manifest.CredentialApplication'
      id:
        type: string
    type: object
  pkg_server_router.GetApplicationsResponse:
    properties:
      applications:
        items:
          $ref: '#/definitions/manifest.CredentialApplication'
        type: array
    type: object
  pkg_server_router.GetCredentialResponse:
    properties:
      credential:
        $ref: '#/definitions/credential.VerifiableCredential'
      credentialJwt:
        type: string
      id:
        type: string
    type: object
  pkg_server_router.GetCredentialStatusListResponse:
    properties:
      credential:
        $ref: '#/definitions/credential.VerifiableCredential'
      credentialJwt:
        type: string
      id:
        type: string
    type: object
  pkg_server_router.GetCredentialStatusResponse:
    properties:
      revoked:
        type: boolean
    type: object
  pkg_server_router.GetCredentialsResponse:
    properties:
      credentials:
        items:
          $ref: '#/definitions/credential.Container'
        type: array
    type: object
  pkg_server_router.GetDIDByMethodResponse:
    properties:
      did:
        $ref: '#/definitions/did.DIDDocument'
    type: object
  pkg_server_router.GetDIDMethodsResponse:
    properties:
      methods:
        items:
          type: string
        type: array
    type: object
  pkg_server_router.GetDIDsByMethodResponse:
    properties:
      dids:
        items:
          $ref: '#/definitions/did.DIDDocument'
        type: array
    type: object
  pkg_server_router.GetHealthCheckResponse:
    properties:
      status:
        type: string
    type: object
  pkg_server_router.GetKeyDetailsResponse:
    properties:
      controller:
        type: string
      createdAt:
        type: string
      id:
        type: string
      type:
        type: string
    type: object
  pkg_server_router.GetManifestResponse:
    properties:
      credential_manifest:
        $ref: '#/definitions/manifest.CredentialManifest'
      id:
        type: string
      manifestJwt:
        type: string
    type: object
  pkg_server_router.GetManifestsResponse:
    properties:
      manifests:
        items:
          $ref: '#/definitions/pkg_server_router.GetManifestResponse'
        type: array
    type: object
  pkg_server_router.GetOperationsRequest:
    properties:
      filter:
        description: |-
          A standard filter expression conforming to https://google.aip.dev/160.
          For example: `done = true`.
        type: string
      parent:
        description: 'The name of the parent''s resource. For example: "/presentation/submissions".'
        type: string
    type: object
  pkg_server_router.GetOperationsResponse:
    properties:
      operations:
        items:
          $ref: '#/definitions/pkg_server_router.Operation'
        type: array
    type: object
  pkg_server_router.GetPresentationDefinitionResponse:
    properties:
      presentation_definition:
        $ref: '#/definitions/exchange.PresentationDefinition'
    type: object
  pkg_server_router.GetResponseResponse:
    properties:
      id:
        type: string
      response:
        $ref: '#/definitions/manifest.CredentialResponse'
    type: object
  pkg_server_router.GetResponsesResponse:
    properties:
      responses:
        items:
          $ref: '#/definitions/manifest.CredentialResponse'
        type: array
    type: object
  pkg_server_router.GetSchemaResponse:
    properties:
      schema:
        $ref: '#/definitions/schema.VCJSONSchema'
      schemaJwt:
        type: string
    type: object
  pkg_server_router.GetSchemasResponse:
    properties:
      schemas:
        items:
          $ref: '#/definitions/pkg_server_router.GetSchemaResponse'
        type: array
    type: object
  pkg_server_router.GetSubmissionResponse:
    properties:
      definition_id:
        type: string
      descriptor_map:
        items:
          $ref: '#/definitions/exchange.SubmissionDescriptor'
        type: array
      id:
        type: string
      reason:
        description: The reason why the submission was approved or denied.
        type: string
      status:
        description: One of {`pending`, `approved`, `denied`}.
        type: string
    required:
    - definition_id
    - descriptor_map
    - id
    - status
    type: object
  pkg_server_router.ListSubmissionRequest:
    properties:
      filter:
        description: |-
          A standard filter expression conforming to https://google.aip.dev/160.
          For example: `status = "done"`.
        type: string
    type: object
  pkg_server_router.ListSubmissionResponse:
    properties:
      submissions:
        items:
          $ref: '#/definitions/presentation.Submission'
        type: array
    type: object
  pkg_server_router.Operation:
    properties:
      done:
        description: Whether this operation has finished.
        type: boolean
      id:
        description: The name of the resource related to this operation. E.g. "/presentations/submissions/<uuid>"
        type: string
      result:
        $ref: '#/definitions/pkg_server_router.OperationResult'
        description: Populated Done == true.
    type: object
  pkg_server_router.OperationResult:
    properties:
      error:
        description: Populated when there was an error with the operation.
        type: string
      response:
        description: Populated iff Error == "". The type should be specified in the
          calling APIs documentation.
    type: object
  pkg_server_router.ResolveDIDResponse:
    properties:
      didDocument:
        $ref: '#/definitions/did.DIDDocument'
      didDocumentMetadata:
        $ref: '#/definitions/did.DIDDocumentMetadata'
      didResolutionMetadata:
        $ref: '#/definitions/did.DIDResolutionMetadata'
    type: object
  pkg_server_router.ReviewSubmissionRequest:
    properties:
      approved:
        type: boolean
      reason:
        type: string
    required:
    - approved
    type: object
  pkg_server_router.ReviewSubmissionResponse:
    properties:
      definition_id:
        type: string
      descriptor_map:
        items:
          $ref: '#/definitions/exchange.SubmissionDescriptor'
        type: array
      id:
        type: string
      reason:
        description: The reason why the submission was approved or denied.
        type: string
      status:
        description: One of {`pending`, `approved`, `denied`}.
        type: string
    required:
    - definition_id
    - descriptor_map
    - id
    - status
    type: object
  pkg_server_router.StoreKeyRequest:
    properties:
      base58PrivateKey:
        type: string
      controller:
        type: string
      id:
        type: string
      type:
        type: string
    required:
    - base58PrivateKey
    - controller
    - id
    - type
    type: object
  pkg_server_router.SubmitApplicationRequest:
    properties:
      applicationJwt:
        type: string
    required:
    - applicationJwt
    type: object
  pkg_server_router.SubmitApplicationResponse:
    properties:
      credential_response:
        $ref: '#/definitions/manifest.CredentialResponse'
      responseJwt:
        type: string
      verifiableCredentials:
        description: this is an interface type to union Data Integrity and JWT style
          VCs
        items: {}
        type: array
    type: object
  pkg_server_router.UpdateCredentialStatusRequest:
    properties:
      revoked:
        type: boolean
    required:
    - revoked
    type: object
  pkg_server_router.UpdateCredentialStatusResponse:
    properties:
      revoked:
        type: boolean
    type: object
  pkg_server_router.VerifyCredentialRequest:
    properties:
      credential:
        $ref: '#/definitions/credential.VerifiableCredential'
      credentialJwt:
        type: string
    type: object
  pkg_server_router.VerifyCredentialResponse:
    properties:
      reason:
        type: string
      verified:
        type: boolean
    type: object
  pkg_server_router.VerifySchemaRequest:
    properties:
      schemaJwt:
        type: string
    required:
    - schemaJwt
    type: object
  pkg_server_router.VerifySchemaResponse:
    properties:
      reason:
        type: string
      verified:
        type: boolean
    type: object
  presentation.Submission:
    properties:
      definition_id:
        type: string
      descriptor_map:
        items:
          $ref: '#/definitions/exchange.SubmissionDescriptor'
        type: array
      id:
        type: string
      reason:
        description: The reason why the submission was approved or denied.
        type: string
      status:
        description: One of {`pending`, `approved`, `denied`}.
        type: string
    required:
    - definition_id
    - descriptor_map
    - id
    - status
    type: object
  rendering.ColorResource:
    properties:
      color:
        description: 'a HEX string color value (e.g. #00000)'
        type: string
    type: object
  rendering.DataDisplay:
    properties:
      description:
        $ref: '#/definitions/rendering.DisplayMappingObject'
      properties:
        items:
          $ref: '#/definitions/rendering.LabeledDisplayMappingObject'
        type: array
      subtitle:
        $ref: '#/definitions/rendering.DisplayMappingObject'
      title:
        $ref: '#/definitions/rendering.DisplayMappingObject'
    type: object
  rendering.DisplayMappingObject:
    properties:
      fallback:
        type: string
      path:
        description: |-
          Ifa path is present it must be an array of JSON Path string expressions
          and the schema property must also be present.
        items:
          type: string
        type: array
      schema:
        $ref: '#/definitions/rendering.DisplayMappingSchema'
      text:
        description: If path is not present, the text value is required with no other
          properties
        type: string
    type: object
  rendering.DisplayMappingSchema:
    properties:
      format:
        description: Must be present if the value of the type property is "string"
        type: string
      type:
        type: string
    required:
    - type
    type: object
  rendering.EntityStyleDescriptor:
    properties:
      background:
        $ref: '#/definitions/rendering.ColorResource'
      hero:
        $ref: '#/definitions/rendering.ImageResource'
      text:
        $ref: '#/definitions/rendering.ColorResource'
      thumbnail:
        $ref: '#/definitions/rendering.ImageResource'
    type: object
  rendering.ImageResource:
    properties:
      alt:
        description: Describes the alternate text for a logo image
        type: string
      uri:
        description: Must be a valid URI string to an image resource
        type: string
    required:
    - uri
    type: object
  rendering.LabeledDisplayMappingObject:
    properties:
      fallback:
        type: string
      label:
        type: string
      path:
        description: |-
          Ifa path is present it must be an array of JSON Path string expressions
          and the schema property must also be present.
        items:
          type: string
        type: array
      schema:
        $ref: '#/definitions/rendering.DisplayMappingSchema'
      text:
        description: If path is not present, the text value is required with no other
          properties
        type: string
    required:
    - label
    type: object
  schema.JSONSchema:
    additionalProperties: true
    type: object
  schema.VCJSONSchema:
    properties:
      author:
        type: string
      authored:
        type: string
      id:
        type: string
      name:
        type: string
      schema:
        $ref: '#/definitions/schema.JSONSchema'
      type:
        type: string
      version:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: tbd-developer@squareup.com
    name: TBD
    url: https://github.com/TBD54566975/ssi-service/issues
  description: https://github.com/TBD54566975/ssi-service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: SSI Service API
  version: "0.1"
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Health is a simple handler that always responds with a 200 OK
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetHealthCheckResponse'
      summary: Health Check
      tags:
      - HealthCheck
  /readiness:
    get:
      consumes:
      - application/json
      description: |-
        ready runs a number of application specific checks to see if all the
        relied upon service are healthy. Should return a 500 if not ready.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Readiness
      tags:
      - Readiness
  /v1/credentials:
    get:
      consumes:
      - application/json
      description: Checks for the presence of a query parameter and calls the associated
        filtered get method
      parameters:
      - description: string issuer
        in: query
        name: issuer
        type: string
      - description: string schema
        in: query
        name: schema
        type: string
      - description: string subject
        in: query
        name: subject
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetCredentialsResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get Credentials
      tags:
      - CredentialAPI
    put:
      consumes:
      - application/json
      description: Create a credential
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.CreateCredentialRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg_server_router.CreateCredentialResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create Credential
      tags:
      - CredentialAPI
  /v1/credentials/{id}:
    delete:
      consumes:
      - application/json
      description: Delete credential by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete Credentials
      tags:
      - CredentialAPI
    get:
      consumes:
      - application/json
      description: Get credential by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetCredentialResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get Credential
      tags:
      - CredentialAPI
  /v1/credentials/{id}/status:
    get:
      consumes:
      - application/json
      description: Get credential status by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetCredentialStatusResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get Credential Status
      tags:
      - CredentialAPI
    put:
      consumes:
      - application/json
      description: Update a credential's status
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.UpdateCredentialStatusRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg_server_router.UpdateCredentialStatusResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update Credential Status
      tags:
      - CredentialAPI
  /v1/credentials/status/{id}:
    get:
      consumes:
      - application/json
      description: Get credential status list by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetCredentialStatusListResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get Credential Status List
      tags:
      - CredentialAPI
  /v1/credentials/verification:
    put:
      consumes:
      - application/json
      description: Verify a given credential by its id
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.VerifyCredentialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.VerifyCredentialResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Verify Credential
      tags:
      - CredentialAPI
  /v1/dids:
    get:
      consumes:
      - application/json
      description: Get supported DID methods
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.GetDIDMethodsResponse'
      summary: Get DID Methods
      tags:
      - DecentralizedIdentityAPI
  /v1/dids/{method}:
    get:
      consumes:
      - application/json
      description: Get DIDs by method
      parameters:
      - description: Method
        in: path
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.GetDIDsByMethodResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get DIDs
      tags:
      - DecentralizedIdentityAPI
    put:
      consumes:
      - application/json
      description: create DID by method
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.CreateDIDByMethodRequest'
      - description: Method
        in: path
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.CreateDIDByMethodResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create DID
      tags:
      - DecentralizedIdentityAPI
  /v1/dids/{method}/{id}:
    get:
      consumes:
      - application/json
      description: Get DID by method
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.CreateDIDByMethodRequest'
      - description: Method
        in: path
        name: method
        required: true
        type: string
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.GetDIDByMethodResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get DID
      tags:
      - DecentralizedIdentityAPI
  /v1/dids/resolver/{id}:
    get:
      consumes:
      - application/json
      description: Resolve a DID that may not be stored in this service
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.ResolveDIDResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Resolve a DID
      tags:
      - DecentralizedIdentityAPI
  /v1/keys:
    put:
      consumes:
      - application/json
      description: Stores a key to be used by the service
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.StoreKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Store Key
      tags:
      - KeyStoreAPI
  /v1/keys/{id}:
    get:
      consumes:
      - application/json
      description: Get details about a stored key
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.GetKeyDetailsResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get Details For Key
      tags:
      - KeyStoreAPI
  /v1/manifests:
    get:
      consumes:
      - application/json
      description: Checks for the presence of a query parameter and calls the associated
        filtered get method
      parameters:
      - description: string issuer
        in: query
        name: issuer
        type: string
      - description: string schema
        in: query
        name: schema
        type: string
      - description: string subject
        in: query
        name: subject
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetManifestsResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get manifests
      tags:
      - ManifestAPI
    put:
      consumes:
      - application/json
      description: Create manifest
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.CreateManifestRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg_server_router.CreateManifestResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create manifest
      tags:
      - ManifestAPI
  /v1/manifests/{id}:
    delete:
      consumes:
      - application/json
      description: Delete manifest by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete manifests
      tags:
      - ManifestAPI
    get:
      consumes:
      - application/json
      description: Get a credential manifest by its id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetManifestResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get manifest
      tags:
      - ManifestAPI
  /v1/manifests/applications:
    get:
      consumes:
      - application/json
      description: Checks for the presence of a query parameter and calls the associated
        filtered get method
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetApplicationsResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get applications
      tags:
      - ApplicationAPI
    put:
      consumes:
      - application/json
      description: Submit a credential application in response to a credential manifest.
        The request body is expected to
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.SubmitApplicationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg_server_router.SubmitApplicationResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Submit application
      tags:
      - ApplicationAPI
  /v1/manifests/applications/{id}:
    delete:
      consumes:
      - application/json
      description: Delete application by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete applications
      tags:
      - ApplicationAPI
    get:
      consumes:
      - application/json
      description: Get application by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetApplicationResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get application
      tags:
      - ApplicationAPI
  /v1/manifests/responses:
    get:
      consumes:
      - application/json
      description: Checks for the presence of a query parameter and calls the associated
        filtered get method
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetResponsesResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get responses
      tags:
      - ResponseAPI
  /v1/manifests/responses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete response by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete responses
      tags:
      - ResponseAPI
    get:
      consumes:
      - application/json
      description: Get response by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetResponseResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get response
      tags:
      - ResponseAPI
  /v1/operations:
    get:
      consumes:
      - application/json
      description: Cancels an ongoing operation, if possible.
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.GetOperationsResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Cancel an ongoing operation
      tags:
      - OperationAPI
  /v1/operations/{id}:
    get:
      consumes:
      - application/json
      description: Get operation by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github.com_tbd54566975_ssi-service_pkg_server_router.Operation'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get an operation
      tags:
      - OperationAPI
  /v1/presentation/definition:
    put:
      consumes:
      - application/json
      description: Create presentation definition
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.CreatePresentationDefinitionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg_server_router.CreatePresentationDefinitionResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create PresentationDefinition
      tags:
      - PresentationDefinitionAPI
  /v1/presentation/definition/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a presentation definition by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete PresentationDefinition
      tags:
      - PresentationDefinitionAPI
    get:
      consumes:
      - application/json
      description: Get a presentation definition by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetPresentationDefinitionResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get PresentationDefinition
      tags:
      - PresentationDefinitionAPI
  /v1/presentations/submissions:
    get:
      consumes:
      - application/json
      description: List existing submissions according to a filtering query. The `filter`
        field follows the syntax described in https://google.aip.dev/160.
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.ListSubmissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.ListSubmissionResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: List Submissions
      tags:
      - SubmissionAPI
    put:
      consumes:
      - application/json
      description: Creates a submission in this server ready to be reviewed.
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.CreateSubmissionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: The type of response is Submission once the operation has finished.
          schema:
            $ref: '#/definitions/pkg_server_router.Operation'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create Submission
      tags:
      - SubmissionAPI
  /v1/presentations/submissions/{id}:
    get:
      consumes:
      - application/json
      description: Get a submission by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetSubmissionResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get Submission
      tags:
      - SubmissionAPI
  /v1/presentations/submissions/{id}/review:
    put:
      consumes:
      - application/json
      description: Reviews a pending submission. After this method is called, the
        operation with `id==presentations/submissions/{submission_id}` will be updated
        with the result of this invocation.
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.ReviewSubmissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.ReviewSubmissionResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Review a pending submissions
      tags:
      - SubmissionAPI
  /v1/schemas:
    get:
      consumes:
      - application/json
      description: Get schemas
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetSchemasResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get Schemas
      tags:
      - SchemaAPI
    put:
      consumes:
      - application/json
      description: Create schema
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.CreateSchemaRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg_server_router.CreateSchemaResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create Schema
      tags:
      - SchemaAPI
  /v1/schemas/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a schema by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete Schema
      tags:
      - SchemaAPI
    get:
      consumes:
      - application/json
      description: Get a schema by its ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.GetSchemaResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get Schema
      tags:
      - SchemaAPI
  /v1/schemas/verification:
    put:
      consumes:
      - application/json
      description: Verify a given schema by its id
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pkg_server_router.VerifySchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg_server_router.VerifySchemaResponse'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Verify Schema
      tags:
      - SchemaAPI
swagger: "2.0"
